import React, { Component, useState, useEffect } from "react";
import { Card } from "react-bootstrap";
// import Button from "@material-ui/core/Button";
// import Grid from "@material-ui/core/Grid";
// import { UpdateStep } from "../../../../services/AuthService";
// import ContractPage from "../../Contracts/index";
import MicroFrontend from "../../../../../MicroFrontend";
import {
  UpdateStep,
  UpdateStoreStep,
} from "../../../../../services/AuthService";
import {
  StripeSuccessAction,
  GetCurrentClientAction,
  contractAction,
} from "../../../../../store/actions/AuthActions";
import axios from "axios";
import swal from "sweetalert";
import success from "../../../../../images/swal-success.png";
import { connect, useDispatch } from "react-redux";

const { ethereum } = window;

let contractHost = process.env.REACT_APP_CONTRACT_HOST;

if (process.env.REACT_APP_ENV == 'DEV') {
  contractHost = process.env.REACT_APP_DEV_CONTRACT_HOST
}

function MetamaskCon({
  prevStep,
  nextStep,
  history,
  sid,
  dataforcompile,
  isnewstore,
}) {
  const [contract, setContract] = useState("");
  const [complete, setComplete] = useState(false);

  const dispatch = useDispatch();
  // let Data
  useEffect(() => {
    dispatch(contractAction(dataforcompile));
  }, [dataforcompile]);

  //dispatch(contractAction(props.auth.dataforcompile));
  //   constructor(props) {
  //     super(props);
  //     this.state = { contract: "", contract: false };
  //   }

  // const back = (e) => {
  //   e.preventDefault();
  //   prevStep();
  // };
  // const continues = (e) => {
  //   e.preventDefault();
  //   // UpdateStep(4);
  //   nextStep();
  // };
  //   onYesPress() {

  //   }

  //   render() {
  //     const { values, history } = this.props;
  //     console.log("values", history);

  useEffect(() => {
    //console.log("inside useEffect");

    if (!complete) {
      getAlerts();
    }
  }, [complete]);
  function getAlerts() {
    //console.log("complete", complete);
    let BaseUrl = "https://lb.wimos.io/api";
    const instance = axios.create({
      baseURL: BaseUrl,
      withCredentials: true,
      headers: {
        Authorization: "Bearer " + localStorage.getItem("c_wimos"),
      },
    });
    const Data = {
      storeId: localStorage.getItem("c_storeid"),
    };
    instance
      .post("/auth/verify-api", Data, {
        headers: {
          "Content-Type": "application/json",
        },
      })
      .then((response) => {
        //  console.log("response", response);
        if (response.data.status) {
          setComplete(true);
          if (isnewstore) {
            UpdateStoreStep(12);
          } else {
            UpdateStoreStep(12);
            UpdateStep(15);
          }
          clearInterval(interval);
        }
      })
      .catch((err) => {
        console.log("err", err.response);

        setComplete(false);
      });
    const interval = setInterval(() => getAlerts(), 38000);
    // return () => {
    //   clearInterval(interval);
    // };
  }

  useEffect(() => {
    if (complete) {
      swal("Success!", "Store Created Successfully", {
        icon: success,
        buttons: {
          confirm: "Continue",
        },
        timer: 2000,
      });
      // console.log("history", history);
      dispatch(StripeSuccessAction(sid, history));
      dispatch(GetCurrentClientAction());
      // nextStep();
    }
  }, [complete]);

  return (
    <>
      {/* <Contract history={history} /> */}

      <Card
        className="contract-selector"
        style={{ padding: "1.25rem 1.85rem 1.25rem" }}
      >
        {/* <center>
          <b>Deploying your smart contracts please wait....</b>
        </center>
        <br />
        <br /> */}
        {!complete ? (
          <MicroFrontend
            history={history}
            host={contractHost}
            name="Contract"
          />
        ) : (
          ""
        )}
        <center>
          <i
            className="fa fa-exclamation-triangle"
            aria-hidden="true"
            style={{ color: "#bd3bb1", marginRight: "10px" }}
          ></i>
          <span style={{ color: "#bd3bb1" }}>
            Do not reload site until creating your store
          </span>
        </center>
      </Card>
      {/* <div className="col-md-12">
          <h5>
            <b>Connect your wallet</b>
          </h5>
          <br />
          <div className="d-grid gap-2 ">
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
            <Grid textAlign="center">
              <button
                // onClick={connectAccount}
                id="connect"
                className="btn btn-info light ms-1 btn-block"
                // variant="outline-primary"
                //   justifyContent="center"
                //   textAlign="center"
                // size="lg"
                // onClick={connect}
              >
                Connect to Metamask
              </button> */}
      {/* <button id="connect">Yes</button> */}
      {/* </Grid>
          </div>
          <br />
          <div
            className=" btn-card bg-white text-success mt-3 "
            textAlign="center"
          >
            <p style={{ color: "#000", textAlign: "center" }}>
              {values.MetaMask}
            </p>
          </div>
        </div> */}
      <br />
      {/* <button
        className="btn btn-primary ms-1"
        variant="contained"
        onClick={back}
      >
        Back
      </button>
      <button
        type="submit"
        className="btn btn-primary ms-1"
        onClick={continues}
      >
        Next
      </button> */}
    </>
  );
}
const mapStateToProps = (state) => {
  return {
    sid: state.auth.storeId.id,
    dataforcompile: state.auth.dataforcompile,
  };
};
export default connect(mapStateToProps)(MetamaskCon);
